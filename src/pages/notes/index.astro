---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import { NOTES } from "@consts";

const data = (await getCollection("notes"))
  .filter((note) => !note.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

type Acc = {
  [year: string]: CollectionEntry<"notes">[];
};

const notes = data.reduce((acc: Acc, note) => {
  const year = note.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(note);
  return acc;
}, {});

const years = Object.keys(notes).sort((a, b) => parseInt(b) - parseInt(a));
---

<Layout title={NOTES.TITLE} description={NOTES.DESCRIPTION}>
  <Container>
    <div class="pb-10">
      <h1 class="animate text-2xl font-semibold text-black dark:text-white">
        {NOTES.TITLE}
      </h1>
      <div class="space-y-4 pt-1">
        <p class="animate text-md">{NOTES.DESCRIPTION}</p>
      </div>
    </div>
    <div class="space-y-10">
      <div class="space-y-4">
        {
          years.map((year) => (
            <section class="animate space-y-4">
              <div class="font-semibold text-black dark:text-white">{year}</div>
              <div>
                <ul class="not-prose flex flex-col gap-4">
                  {notes[year].map((note) => {
                    // @ts-ignore
                    note.slug = "notes/" + note.slug;
                    return (
                      <li>
                        <ArrowCard entry={note} />
                      </li>
                    );
                  })}
                </ul>
              </div>
            </section>
          ))
        }
      </div>
    </div>
  </Container>
</Layout>
